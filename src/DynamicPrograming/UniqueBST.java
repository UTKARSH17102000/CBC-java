package DynamicPrograming;

public class UniqueBST {
    //No. of BST generated by n = 2nCn/n+1
    // n = 3 == 6C3/4 =5 Catalan Series = sum of from i =1 to n f(i-1)*f(n-i);
    // n 0 1 2 3 4 5
    //   1 1 2 5 14 42 ----
    // Application
     // No. of BST
    // No. of valid balanced parentheses
    // No. of ways a conves polygon of n+2 sides can split into triangles
    // No. of full Binary trees(A rooted binary trees is full if every vertex has either two children or no children ) with n+1 leaves
     // No, of unlabeled binary trees
    // No. of ways to insert n pairs of paranthesis in a word of n+1 letters
   // mountain ranges problem follow catalan series
    public static void main(String[] args) {

        System.out.println(BSTRec(5));
        System.out.println(BSTTD(5, new int [6]));
        System.out.println(BSTBU(5));
    }

    public  static  int BSTRec(int n){

        if(n<=1)
             return 1;

        int total =0;
        for(int i =1;i<=n;i++){
            //nodes in left subtree
          int l =  BSTRec(i-1);
            //nodes in right subtree
          int r =  BSTRec(n-i);
          // node after combine root and no. of both left and right subtrees
          int ans = l*r;

          total += ans;
        }
        return total;
    }

    public  static  int BSTTD(int n, int [] strg){

        if(n<=1)
            return 1;

        if(strg[n] != 0)
             return strg[n];
        int total =0;
        for(int i =1;i<=n;i++){
            //nodes in left subtree
            int l =  BSTTD(i-1,strg);
            //nodes in right subtree
            int r =  BSTTD(n-i,strg);
            // node after combine root and no. of both left and right subtrees
            int ans = l*r;

            total += ans;
        }
        strg[n] = total;
        return total;
    }

    public  static  int BSTBU(int tn ){
        int [] strg = new int [tn+1];
        strg[0] = strg[1] =1;

        for(int n =2;n< strg.length;n++){
            int total =0;
            for(int i =1;i<=n;i++){
                //nodes in left subtree
                int l =  strg[i-1];
                //nodes in right subtree
                int r =  strg[n-i];
                // node after combine root and no. of both left and right subtrees
                int ans = l*r;

                total += ans;
            }
            strg[n] = total;
        }

        return strg[tn];
    }
}
